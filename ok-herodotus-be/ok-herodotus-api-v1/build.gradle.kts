plugins {
    id("build-jvm")
    alias(libs.plugins.openapi.generator)
    alias(libs.plugins.kotlinx.serialization)
}

sourceSets {
    main {
        java.srcDir(layout.buildDirectory.dir("generate-resources/main/src/main/kotlin"))
    }
}

openApiGenerate {
    val openapiGroup = "${rootProject.group}.api.v1"
    generatorName.set("kotlin")
    packageName.set(openapiGroup)
    apiPackage.set("$openapiGroup.api")
    modelPackage.set("$openapiGroup.models")
    inputSpec.set(rootProject.ext["spec-v1"] as String)

    /**
     * Use only models
     * Doc: https://openapi-generator.tech/docs/globals
     */
    globalProperties.apply {
        put("models", "")
        put("modelDocs", "false")
    }

    /**
     * Additional parameters from
     * https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/kotlin.md
     */
    configOptions.set(
        mapOf(
            "dateLibrary" to "kotlinx-datetime",
            "enumPropertyNaming" to "UPPERCASE",
            "serializationLibrary" to "kotlinx_serialization",
            "collectionType" to "list"
        )
    )
}

/**
 * Post process files generated by OpenAPI generator.
 * We need to remove Serializable annotation from interfaces since they are already serializable
 */
abstract class PostProcessOpenApiTask : DefaultTask() {
    @get:Input
    abstract var generatedFilesDir: String

    @TaskAction
    fun action() {
        File(generatedFilesDir).walk().forEach { file ->
            if (file.isFile) {
                val content = file.readText()
                if (Regex("\ninterface\\s\\w+\\s\\{").containsMatchIn(content)) {
                    val updatedContent = content.replace(
                        "@Serializable",
                        "",
                    )
                    file.writeText(updatedContent)
                }
            }
        }
    }
}

dependencies {
    implementation(kotlin("stdlib"))
    implementation(libs.kotlinx.serialization.json)
    implementation(libs.kotlinx.datetime)
    testImplementation(kotlin("test-junit"))
}

tasks {
    register<PostProcessOpenApiTask>("postProcess") {
        group = "openapi tools"
        description = "Post process files generated by OpenAPI"
        dependsOn(openApiGenerate)
        generatedFilesDir = "$projectDir/build/generate-resources/"
    }

    compileKotlin {
        dependsOn("postProcess")
    }
}
